; @generated by customCommGenerator
#include <avr/io.h>
	.text
;
; * Receive 1 byte
; * @return high: error low: value
.global	SW_RX_2_receiveByte
	.type	SW_RX_2_receiveByte, @function
SW_RX_2_receiveByte:
	ldi r23, 8
	ldi r24, 0
	ldi r25, 0
loop:
	lsr r24
	rjmp receiveBit
receiveBit_ret:
	dec r23
	brne loop
	ret
	
receiveBit_err:
	mov r25, r24
	swap r23
	or r25, r23	; High hex digit shows index of failing bit
	ldi 24, 0
	ret
.size	SW_RX_2_receiveByte, .-SW_RX_2_receiveByte
	

; * Receive 1 bit
; * @return r24 is untouched if received 0, highest bit is set otherwise. load error code to r24 and jump to receiveBit_err in case of error
receiveBit:
	#if defined(DEBUG_EDGE_START_WAIT)
	DEBUG_EDGE_START_WAIT
	#endif
	; Wait for "start bit" low
	sbis _SFR_IO_ADDR(PIND), 4	; 0
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 1
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 2
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 3
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 4
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 5
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 6
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 7
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 8
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 9
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 10
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 11
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 12
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 13
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 14
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 15
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 16
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 17
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 18
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 19
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 20
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 21
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 22
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 23
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 24
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 25
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 26
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 27
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 28
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 29
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 30
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 31
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 32
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 33
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 34
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 35
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 36
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 37
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 38
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 39
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 40
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 41
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 42
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 43
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 44
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 45
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 46
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 47
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 48
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 49
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 50
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 51
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 52
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 53
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 54
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 55
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 56
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 57
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 58
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 59
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 60
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 61
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 62
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 63
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 64
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 65
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 66
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 67
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 68
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 69
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 70
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 71
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 72
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 73
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 74
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 75
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 76
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 77
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 78
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 79
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 80
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 81
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 82
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 83
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 84
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 85
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 86
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 87
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 88
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 89
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 90
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 91
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 92
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 93
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 94
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 95
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 96
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 97
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 98
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 99
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 100
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 101
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 102
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 103
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 104
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 105
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 106
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 107
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 108
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 109
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 110
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 111
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 112
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 113
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 114
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 115
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 116
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 117
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 118
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 119
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 120
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 121
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 122
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 123
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 124
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 125
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 126
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 127
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 128
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 129
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 130
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 131
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 132
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 133
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 134
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 135
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 136
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 137
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 138
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 139
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 140
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 141
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 142
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 143
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 144
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 145
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 146
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 147
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 148
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 149
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 150
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 151
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 152
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 153
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 154
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 155
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 156
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 157
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 158
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 159
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 160
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 161
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 162
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 163
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 164
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 165
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 166
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 167
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 168
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 169
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 170
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 171
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 172
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 173
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 174
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 175
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 176
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 177
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 178
	rjmp receiveBit_prellWait
	sbis _SFR_IO_ADDR(PIND), 4	; 179
	rjmp receiveBit_prellWait
receiveBit_timeout_start:
	ldi r24, 2
	rjmp receiveBit_err
	
receiveBit_prellWait:
	#if defined(DEBUG_EDGE_PRELLWAIT)
	DEBUG_EDGE_PRELLWAIT
	#endif
	nop
	nop
	nop
	nop

receiveBit_started:
; Debug receiving timing - can be used to inject a edge generating command. Must be defined to empty otherwise
	#if defined(DEBUG_EDGE_START)
	DEBUG_EDGE_START
	#endif
	; Wait for end of strobe - high
	sbic _SFR_IO_ADDR(PIND), 4	; 0
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 1
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 2
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 3
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 4
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 5
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 6
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 7
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 8
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 9
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 10
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 11
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 12
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 13
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path
	sbic _SFR_IO_ADDR(PIND), 4	; 14
	rjmp receiveBit0	; We could jump directly to receiveBit_ret when not DEBUG but it is unnecessary because this is the faster path

waitStopBit:
	sbr r24, 0b10000000	; Set return value which is already known Wait after setting value so we potentially spare a cycle after wait
	; Wait for stop bit up edge
	sbic _SFR_IO_ADDR(PIND), 4	; 0
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 1
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 2
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 3
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 4
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 5
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 6
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 7
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 8
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 9
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 10
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif
	sbic _SFR_IO_ADDR(PIND), 4	; 11
#ifndef DEBUG_EDGE_END
	rjmp receiveBit_ret ; if marker debug is disabled then we can return here: additional 2 cycles spared!
#endif
	
#ifdef DEBUG_EDGE_END
	rjmp receiveBit1	; if marker debug is enabled then we have to jump to a handler: additional 2 cycles lost!
#endif

stopBitTimeout:
	ldi r24, 1
	rjmp receiveBit_err

#ifdef DEBUG_EDGE_END
receiveBit1:
; Debug receiving timing - can be used to inject a edge generating command. Must be defined to empty otherwise
	DEBUG_EDGE_END
	rjmp receiveBit_ret
#endif

receiveBit0:
; Debug receiving timing - can be used to inject a edge generating command. Must be defined to empty otherwise
#ifdef DEBUG_EDGE_END
	DEBUG_EDGE_END
#endif
	rjmp receiveBit_ret
	.size	receiveBit, .-receiveBit

